{"version":3,"sources":["webpack:///./components/task1.js","webpack:///./components/task2.js","webpack:///./components/task3.js"],"names":["delay","ms","Promise","res","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","callback","updatedUsers","map","user","resolve","table","makeTransaction","transaction","min","max","Math","floor","random","onSuccess","onError","canProcess","id","logSuccess","logError","warn","amount","catch"],"mappings":"0HAAMA,EAAQ,SAAAC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GACjBC,YAAW,kBAAMD,EAAIF,KAAKA,OAIxBI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAEvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,G,kCCVXK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,EAAUC,GAC3C,IAAMC,EAAeH,EAASI,KAAI,SAAAC,GAAI,OACpCA,EAAKR,OAASI,EAAd,iBAA8BI,EAA9B,CAAoCP,QAASO,EAAKP,SAAWO,KAG/D,OAAOjB,QAAQkB,QAAQH,IAGnBZ,EAAS,SAAAY,GAAY,OAAIV,QAAQc,MAAMJ,IAE7CJ,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GClBnC,IAIMiB,EAAkB,SAAAC,GAEtB,IANiCC,EAAKC,EAMhCzB,GAN2BwB,EAMO,IANFC,EAMO,IALtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAOpD,OAAO,IAAItB,SAAQ,SAAC2B,EAAWC,GAC7B,IAAMC,EAAaL,KAAKE,SAAW,GAEnCxB,YAAW,WAEP2B,EACFF,EAAU,CAACN,EAAYS,GAAIhC,IAE3B8B,EAAQP,EAAYS,MAEnBhC,OAIDiC,EAAa,SAAC,GAAgB,IAAfD,EAAe,KAAX1B,EAAW,KAClCC,QAAQC,IAAR,eAA2BwB,EAA3B,iBAA8C1B,EAA9C,OAGI4B,EAAW,SAAAF,GACfzB,QAAQ4B,KAAR,gCAA6CH,EAA7C,8BAIFV,EAAgB,CAAEU,GAAI,GAAII,OAAQ,MAC/B3B,KAAKwB,GACLI,MAAMH,GAETZ,EAAgB,CAAEU,GAAI,GAAII,OAAQ,MAC/B3B,KAAKwB,GACLI,MAAMH,GAETZ,EAAgB,CAAEU,GAAI,GAAII,OAAQ,KAC/B3B,KAAKwB,GACLI,MAAMH,GAETZ,EAAgB,CAAEU,GAAI,GAAII,OAAQ,MAC/B3B,KAAKwB,GACLI,MAAMH,K","file":"main.aa328e6e8ad78f7a9c36.js","sourcesContent":["const delay = ms => {\r\n  return new Promise(res => {\r\n    setTimeout(() => res(ms), ms);\r\n  });\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\ndelay(2000).then(logger); \r\ndelay(1000).then(logger); \r\ndelay(1500).then(logger); ","const users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName, callback) => {\r\n  const updatedUsers = allUsers.map(user =>\r\n    user.name === userName ? { ...user, active: !user.active } : user,\r\n  );\r\n\r\n  return Promise.resolve(updatedUsers);\r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);","const randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = transaction => {\r\n\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n\r\n  return new Promise((onSuccess, onError) => {\r\n    const canProcess = Math.random() > 0.3;\r\n\r\n    setTimeout(() => {\r\n\r\n    if (canProcess) {\r\n      onSuccess([transaction.id, delay]);\r\n    } else {\r\n      onError(transaction.id);\r\n    }\r\n    }, delay);\r\n  });\r\n};\r\n\r\nconst logSuccess = ([id, time] ) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\n  "],"sourceRoot":""}